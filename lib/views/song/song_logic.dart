import 'dart:async';
import 'dart:io';

import 'package:audio_waveforms/audio_waveforms.dart';
import 'package:bloomy/controllers/album_controller.dart';
import 'package:bloomy/controllers/song_controller.dart';
import 'package:bloomy/models/albums.dart';
import 'package:bloomy/models/song_model.dart';
import 'package:bloomy/services/album_service.dart';
import 'package:bloomy/services/music_player_service.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

class SongLogic extends GetxController {
  final SongController songController = Get.find<SongController>();
  final MusicPlayerService _playerService = Get.find<MusicPlayerService>();
  final playerController = PlayerController(); //  //s√≥ng nh·∫°c
  final duration = Duration.zero.obs; //t·ªïng tgian b√†i h√°t
  final position = Duration.zero.obs; //th·ªùi gian hi·ªán t·∫°i
  final sliderValue = 0.0.obs; //v·ªã tr√≠ hi·ªán t·∫°i
  final isDragging = false.obs; //c√≥ k√©o ko
  var isReady = false.obs; //s√≥ng nh·∫°c ƒë√£ oke ch∆∞a
  var progress = 0.0.obs; //ti·∫øn tr√¨nh b√†i h√°t ƒë·ªÉ ƒë·ªïi m√†u
  var album = Rxn<AlbumModel>();
  final albumController = Get.find<AlbumController>();





  MusicPlayerService get audioPlayer => _playerService;
  Timer? _waveformStopTimer;



  @override
  void onInit() async {
    super.onInit();
    final args = Get.arguments as Map;
    final SongModel songTemp = args['song'];
    final AlbumModel? albumTemp = args['album'];
    if (songController.state.song.value?.id != songTemp.id) {
      Future.delayed(
        Duration.zero,
        () async {
          songController.state.song.value = songTemp;
          songController.state.isPlay.value = true;
          songController.state.isShow.value = true;

          _playerService.playMp3(songController.state.song.value!.filePath);
        },
      );
    }

    if (albumTemp != null) {
      album.value = albumTemp;
      albumController.songs.value = album.value!.songs;
      print("M·ªü t·ª´ album: ${albumController.songs.value}");
    } else {
      albumController.songs.value = await songController.loadSongs();
    }
    //tr·∫£ v·ªÅ th·ªùi gian c·ªßa b√†i h·∫•t
    _playerService.durationStream.listen((d) {
      if (d != null) duration.value = d;
    });

    // Theo d√µi v·ªã tr√≠ hi·ªán t·∫°i
    _playerService.positionStream.listen(
      (p) {
        if (!isDragging.value) {
          position.value = p;
          sliderValue.value = p.inMilliseconds.toDouble();
          progress.value = sliderValue.value / duration.value.inMilliseconds.toDouble();
        }
      },
    );
    //c√≥ h√†m delay ƒë·ªÉ oninit kh·ªüi t·∫°o xong m·ªõi ch·∫°y tr√°nh l·ªói
    Future.delayed(Duration.zero, () {
      prepare();
    });
  }

  Future<void> prepare() async {
    final path = songController.state.song.value?.filePath ?? "";

    if (path.isEmpty) {
      print("‚ùå File path r·ªóng ho·∫∑c null");
      return;
    }

    final file = File(path);
    final exists = await file.exists();

    print("üìÇ File exists: $exists");
    if (!exists) return;

    await playerController.preparePlayer(
      path: path,
      shouldExtractWaveform: true,
      noOfSamples: 5000,
      volume: 0,
    );

    isReady.value = true;

    // N·∫øu b·∫°n kh√¥ng mu·ªën ph√°t t·ª± ƒë·ªông th√¨ ƒë·ª´ng g·ªçi startPlayer
    await playerController.startPlayer();
    await playerController.seekTo(sliderValue.value.toInt());
  }

  @override
  void onClose() {
    playerController.stopPlayer();
    playerController.dispose();
    super.onClose();
  }


  void playPauseMusic() {
    if (songController.state.isPlay.value) {
      _playerService.pause();
      songController.state.isPlay.value = false;
      playerController.pausePlayer();
      print("slider value stop: $sliderValue");

    } else {

      _playerService.resume();
      songController.state.isPlay.value = true;
      playerController.startPlayer();
      playerController.seekTo(sliderValue.value.toInt());
      print("slider value start: $sliderValue");
    }
  }

  String formatDuration(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    return '$minutes:$seconds';
  }

  void seekTo(double milliseconds) {
    final pos = Duration(milliseconds: milliseconds.toInt());
    _playerService.seek(pos);
    position.value = pos;
    sliderValue.value = milliseconds;
    // playerController.seekTo(milliseconds.toInt());
  }
  List<Color> getGradientColors(double progress) {
    // M√†u kh·ªüi ƒë·∫ßu (g·∫ßn ƒëen, v·ªõi √°nh s·∫Øc nh·∫π)
    const startColor1 = Color(0xFF0D1B2A); // X√°m xanh ƒë·∫≠m g·∫ßn ƒëen
    const startColor2 = Color(0xFF1B263B); // Xanh navy ƒë·∫≠m

    // M√†u k·∫øt th√∫c (h·ªìng ph·∫•n v√† xanh cyan)// H·ªìng ph·∫•n nh·∫π
    const endColor1 = Color(0xFF00BCD4);
    const endColor2 = Color(0xFF0D1B2A); // X√°m xanh ƒë·∫≠m g·∫ßn ƒëen


    // T√≠nh to√°n m√†u trung gian d·ª±a tr√™n ti·∫øn tr√¨nh
    Color color1 = Color.lerp(startColor1, endColor1, progress)!;
    Color color2 = Color.lerp(startColor2, endColor2, progress)!;

    return [color1, color2];
  }

}
